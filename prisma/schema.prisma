datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Using Postgres
generator client {
  provider = "prisma-client-js"
}

model ItemForSale {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  name        String
  description String?
  condition   Condition @default(NEW)
  reported    Boolean   @default(false)
  price       Int? // Some items may not have a price, e.g. free items
  images      String[]
  location    String
  tags        String[]
  views       Int       @default(0)
  canDeliver  Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  messages    Message[]
}

model Category {
  id           String        @id @default(cuid())
  name         String
  slug         String        @unique
  itemsForSale ItemForSale[]
}

model Message {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  content     String
  sender      User        @relation("MessageSender", fields: [senderId], references: [id])
  senderId    String
  recipient   User        @relation("MessageRecipient", fields: [recipientId], references: [id])
  recipientId String
  itemForSale ItemForSale @relation(fields: [itemId], references: [id])
  itemId      String
}

model Review {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  rating     Int
  comment    String
  reviewer   User     @relation("ReviewReviewer", fields: [reviewerId], references: [id])
  reviewerId String
  reviewee   User     @relation("ReviewReviewee", fields: [revieweeId], references: [id])
  revieweeId String
}

// The following User, Account, Session and VerificationToken models are from the NextAuth.js docs
model User {
  id               String        @id @default(cuid())
  name             String?
  email            String?       @unique
  emailVerified    DateTime?
  image            String?
  phone            String?       @unique
  accounts         Account[]
  sessions         Session[]
  itemsForSale     ItemForSale[]
  sentMessages     Message[]     @relation("MessageSender")
  receivedMessages Message[]     @relation("MessageRecipient")
  givenReviews     Review[]      @relation("ReviewReviewer")
  receivedReviews  Review[]      @relation("ReviewReviewee")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Condition {
  NEW
  LIKE_NEW
  EXCELLENT
  GOOD
  FAIR
  SALVAGE
}
